# =============================================================================
# MENU_STATE.PY - STATE MENU CH√çNH C·ª¶A GAME PAC-MAN
# =============================================================================
# File n√†y ch·ª©a MenuState - m√†n h√¨nh menu ch√≠nh c·ªßa game
# Qu·∫£n l√Ω navigation gi·ªØa c√°c m√†n h√¨nh kh√°c nhau v√† c√†i ƒë·∫∑t

import sys
import math
import pygame
from pathlib import Path

from statemachine import State
from ui.button import PacManButton
from ui.neontext import NeonText
# from ui.advanced_settings import AdvancedSettingsModal  # Removed - not needed
from ui.constants import *

class MenuState(State):
    """
    MenuState - State menu ch√≠nh c·ªßa game Pac-Man
    - Qu·∫£n l√Ω navigation gi·ªØa c√°c scene kh√°c nhau
    - C√≥ animation v√† hi·ªáu ·ª©ng visual ƒë·∫πp m·∫Øt
    - H·ªó tr·ª£ keyboard navigation
    """
    # C√°c scene constants
    HOME = 'home'           # M√†n h√¨nh ch√≠nh
    OPTIONS = 'option'      # M√†n h√¨nh c√†i ƒë·∫∑t
    GAME_MODES = 'game_modes'  # M√†n h√¨nh ch·∫ø ƒë·ªô ch∆°i
    SCORES = 'scores'       # M√†n h√¨nh ƒëi·ªÉm cao
    STATES = 'states'       # M√†n h√¨nh th√¥ng tin states

    def __init__(self, app, machine):
        """
        Kh·ªüi t·∫°o MenuState
        Args:
            app: Tham chi·∫øu ƒë·∫øn App ch√≠nh
            machine: StateMachine qu·∫£n l√Ω states
        """
        super().__init__(app, machine)
        self.scene = MenuState.HOME  # Scene hi·ªán t·∫°i
        self.animation_time = 0  # Th·ªùi gian animation
        self.selected_algorithm = 'BFS'  # Thu·∫≠t to√°n AI ƒë∆∞·ª£c ch·ªçn
        self._algorithms = ['BFS', 'DFS', 'IDS', 'UCS']  # Danh s√°ch thu·∫≠t to√°n
        self.current_button_index = 0  # Index button hi·ªán t·∫°i (cho keyboard nav)

        # Kh·ªüi t·∫°o background v√† UI components
        self._load_background()
        self._init_ui_components()
        
        # Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ theo d√µi button focus
        self._last_button_index = -1
        self._last_hovered_button = -1
        
        # Advanced Settings removed - use enhanced basic settings instead

    def _load_background(self):
        """
        Load background image cho menu
        - Load h√¨nh ·∫£nh t·ª´ assets/images/pm.jpg
        - Scale ƒë·ªÉ fit v·ªõi k√≠ch th∆∞·ªõc m√†n h√¨nh
        - Throw error n·∫øu kh√¥ng t√¨m th·∫•y file
        """
        IMG_PATH = Path("assets/images/pm.jpg")
        if not IMG_PATH.exists():
            raise FileNotFoundError(f"Background image not found at {IMG_PATH}")
        
        bg = pygame.image.load(str(IMG_PATH)).convert()
        self.background = pygame.transform.scale(bg, (self.app.WIDTH, self.app.HEIGHT))

    def _init_ui_components(self):
        """
        Kh·ªüi t·∫°o t·∫•t c·∫£ UI components cho c√°c scene
        - T·∫°o dictionary ch·ª©a components cho t·ª´ng scene
        - L∆∞u reference ƒë·∫øn algorithm button ƒë·ªÉ update
        """
        center_x = self.app.WIDTH // 2
        center_y = self.app.HEIGHT // 2
        
        # T·∫°o dictionary ch·ª©a UI components cho t·ª´ng scene
        self.UIComponents = {
            MenuState.HOME: self._create_home_components(center_x, center_y),
            MenuState.OPTIONS: self._create_options_components(center_x, center_y),
            MenuState.GAME_MODES: self._create_game_modes_components(center_x, center_y),
            MenuState.SCORES: self._create_scores_components(center_x, center_y),
            MenuState.STATES: self._create_states_components(center_x, center_y)
        }
        
        # L∆∞u reference ƒë·∫øn algorithm button ƒë·ªÉ update text
        self.algo_button = self.UIComponents[MenuState.OPTIONS][2]

    def _create_home_components(self, center_x, center_y):
        """
        T·∫°o UI components cho m√†n h√¨nh ch√≠nh (HOME)
        - Title v√† subtitle v·ªõi hi·ªáu ·ª©ng neon
        - C√°c button ch√≠nh v·ªõi spacing ƒë·∫πp
        - S·ª≠ d·ª•ng emoji v√† m√†u s·∫Øc Pac-Man theme
        
        Args:
            center_x, center_y: T·ªça ƒë·ªô trung t√¢m m√†n h√¨nh
        Returns:
            List c√°c UI components cho HOME scene
        """
        # Spacing v√† alignment t·ªët h∆°n cho buttons
        button_spacing = 80  # Kho·∫£ng c√°ch gi·ªØa c√°c buttons
        start_y = center_y - 100  # V·ªã tr√≠ b·∫Øt ƒë·∫ßu cho button ƒë·∫ßu ti√™n
        
        return [
            # Title ch√≠nh v·ªõi hi·ªáu ·ª©ng neon v√† rainbow
            NeonText(self.app, "PAC-MAN", PAC_YELLOW, center_x, center_y - 220, 80, 
                     glow=True, rainbow=True, outline=True),
            # Subtitle
            NeonText(self.app, "ARCADE ADVENTURE", GHOST_PINK, center_x, center_y - 160, 22, 
                     glow=True, outline=True),
            
            # Main menu buttons v·ªõi spacing t·ªët h∆°n
            PacManButton(self.app, pos=(center_x, start_y), text="üéÆ GAME MODES", 
                         onclick=[self.show_game_modes], primary=True),
            PacManButton(self.app, pos=(center_x, start_y + button_spacing), text="üìä HIGH SCORES", 
                         onclick=[self.show_scores]),
            PacManButton(self.app, pos=(center_x, start_y + button_spacing * 2), text="üîß SETTINGS", 
                         onclick=[self.show_settings]),
            # Advanced Settings button removed - enhanced basic settings instead
            PacManButton(self.app, pos=(center_x, start_y + button_spacing * 3), text="‚ÑπÔ∏è STATES", 
                         onclick=[self.show_states]),
            PacManButton(self.app, pos=(center_x, start_y + button_spacing * 4), text="X EXIT", 
                         onclick=[self.quit]),
        ]

    def _create_options_components(self, center_x, center_y):
        return [
            NeonText(self.app, "SETTINGS", GHOST_PINK, center_x, center_y - 120, 60, 
                     glow=True, outline=True),
            NeonText(self.app, "Choose AI Algorithm:", DOT_WHITE, center_x, center_y - 60, 18, outline=True),
            
            # Algorithm selection button
            PacManButton(self.app, pos=(center_x, center_y - 10), text=f"AI: {self.selected_algorithm}", 
                         onclick=[self.cycle_algorithm], primary=True),
                       
            # Algorithm description
            NeonText(self.app, lambda: self.get_algo_description(), (255, 255, 255), 
                     center_x, center_y + 40, 14, outline=True),
            
            # Back button - moved further down
            PacManButton(self.app, pos=(center_x, center_y + 120), text="‚ùÆ BACK", 
                         onclick=[self.back_to_home]),
        ]

    def _create_game_modes_components(self, center_x, center_y):
        button_spacing = 80
        start_y = center_y - 80
        
        return [
            NeonText(self.app, "GAME MODES", PAC_YELLOW, center_x, center_y - 140, 50, 
                     glow=True, outline=True),
            
            # Game mode buttons with better spacing
            PacManButton(self.app, pos=(center_x, start_y), text="ü§ñ AI MODE", 
                         onclick=[self.start_ai_game], primary=True),
            PacManButton(self.app, pos=(center_x, start_y + button_spacing), text="üë§ PLAYER MODE", 
                         onclick=[self.start_player_game], primary=True),
            PacManButton(self.app, pos=(center_x, start_y + button_spacing * 2), text="‚öîÔ∏è COMPARISON", 
                         onclick=[self.start_comparison_game], primary=True),
            
            # Back button - moved further down
            PacManButton(self.app, pos=(center_x, center_y + 180), text="‚ùÆ BACK", 
                         onclick=[self.back_to_home]),
        ]

    def _create_scores_components(self, center_x, center_y):
        return [
            NeonText(self.app, "HIGH SCORES", GHOST_ORANGE, center_x, center_y - 140, 50, 
                     glow=True, outline=True),
            
            # Placeholder scores with better spacing
            NeonText(self.app, "1. AI Master - 9999", DOT_WHITE, center_x, center_y - 80, 20, outline=True),
            NeonText(self.app, "2. Player Pro - 8500", DOT_WHITE, center_x, center_y - 50, 20, outline=True),
            NeonText(self.app, "3. Ghost Hunter - 7200", DOT_WHITE, center_x, center_y - 20, 20, outline=True),
            NeonText(self.app, "4. Dot Collector - 6800", DOT_WHITE, center_x, center_y + 10, 20, outline=True),
            NeonText(self.app, "5. Pac Champion - 5500", DOT_WHITE, center_x, center_y + 40, 20, outline=True),
            
            # Back button - moved further down
            PacManButton(self.app, pos=(center_x, center_y + 140), text="‚ùÆ BACK", 
                         onclick=[self.back_to_home]),
        ]

    def _create_states_components(self, center_x, center_y):
        return [
            NeonText(self.app, "GAME STATES", GHOST_BLUE, center_x, center_y - 140, 50, 
                     glow=True, outline=True),
            
            # State information with better spacing
            NeonText(self.app, "Current State: Menu", DOT_WHITE, center_x, center_y - 80, 18, outline=True),
            NeonText(self.app, "Available States:", DOT_WHITE, center_x, center_y - 50, 16, outline=True),
            NeonText(self.app, "‚Ä¢ Menu State", GHOST_PINK, center_x, center_y - 20, 14, outline=True),
            NeonText(self.app, "‚Ä¢ Game State", GHOST_PINK, center_x, center_y + 5, 14, outline=True),
            NeonText(self.app, "‚Ä¢ Pause State", GHOST_PINK, center_x, center_y + 30, 14, outline=True),
            NeonText(self.app, "‚Ä¢ Game Over State", GHOST_PINK, center_x, center_y + 55, 14, outline=True),
            
            # Back button - moved further down
            PacManButton(self.app, pos=(center_x, center_y + 140), text="‚ùÆ BACK", 
                         onclick=[self.back_to_home]),
        ]

    def get_algo_description(self):
        """
        L·∫•y m√¥ t·∫£ c·ªßa thu·∫≠t to√°n AI hi·ªán t·∫°i
        Returns:
            String m√¥ t·∫£ thu·∫≠t to√°n
        """
        descriptions = {
            'BFS': "‚óè Breadth-First: Explores level by level ‚óè",
            'DFS': "‚óè Depth-First: Goes deep first ‚óè", 
            'IDS': "‚óè Iterative Deepening: Best of both worlds ‚óè",
            'UCS': "‚óè Uniform Cost: Finds optimal path ‚óè"
        }
        return descriptions.get(self.selected_algorithm, "")

    def start_game(self):
        """
        B·∫Øt ƒë·∫ßu game v·ªõi thu·∫≠t to√°n ƒë√£ ch·ªçn
        """
        print(f"Starting game with algorithm: {self.selected_algorithm}")
        # TODO: Implement game start logic

    def start_ai_game(self):
        """
        B·∫Øt ƒë·∫ßu game AI mode
        """
        print(f"Starting AI game with algorithm: {self.selected_algorithm}")
        # Ph√°t √¢m thanh b·∫Øt ƒë·∫ßu game
        self.app.sound_system.play_sound('button_click')
        # B·∫Øt ƒë·∫ßu nh·∫°c n·ªÅn
        self.app.sound_system.play_music('background_music')
        
        from states.game_state import GameState
        game_state = GameState(self.app, self.machine, self.selected_algorithm)
        self.replace_state(game_state)

    def start_player_game(self):
        """
        B·∫Øt ƒë·∫ßu game player mode (kh√¥ng AI)
        """
        print("Starting player game")
        # Ph√°t √¢m thanh b·∫Øt ƒë·∫ßu game
        self.app.sound_system.play_sound('button_click')
        # B·∫Øt ƒë·∫ßu nh·∫°c n·ªÅn
        self.app.sound_system.play_music('background_music')
        
        from states.game_state import GameState
        game_state = GameState(self.app, self.machine, "MANUAL")
        self.replace_state(game_state)

    def start_comparison_game(self):
        """
        B·∫Øt ƒë·∫ßu game comparison mode
        """
        print("Starting comparison game")
        from states.comparison_state import ComparisonState
        comparison_state = ComparisonState(self.app, self.machine)
        self.replace_state(comparison_state)

    def cycle_algorithm(self):
        """
        Chuy·ªÉn ƒë·ªïi thu·∫≠t to√°n AI
        - Cycle qua danh s√°ch algorithms
        - C·∫≠p nh·∫≠t text c·ªßa algorithm button
        """
        self.app.sound_system.play_sound('button_click')
        idx = self._algorithms.index(self.selected_algorithm)
        self.selected_algorithm = self._algorithms[(idx + 1) % len(self._algorithms)]
        
        if self.algo_button is not None:
            self.algo_button.text = f"AI: {self.selected_algorithm}"

    def show_game_modes(self):
        self.app.sound_system.play_sound('button_click')
        self.scene = MenuState.GAME_MODES
        self.current_button_index = 0
        self._last_button_index = -1  # Reset ƒë·ªÉ kh√¥ng ph√°t hover sound
        self._update_scene_focus()

    def show_scores(self):
        self.app.sound_system.play_sound('button_click')
        self.scene = MenuState.SCORES
        self.current_button_index = 0
        self._last_button_index = -1  # Reset ƒë·ªÉ kh√¥ng ph√°t hover sound
        self._update_scene_focus()

    def show_states(self):
        self.app.sound_system.play_sound('button_click')
        self.scene = MenuState.STATES
        self.current_button_index = 0
        self._last_button_index = -1  # Reset ƒë·ªÉ kh√¥ng ph√°t hover sound
        self._update_scene_focus()

    def show_options(self):
        self.app.sound_system.play_sound('button_click')
        self.scene = MenuState.OPTIONS
        self.current_button_index = 0
        self._last_button_index = -1  # Reset ƒë·ªÉ kh√¥ng ph√°t hover sound
        self._update_scene_focus()
    
    def show_settings(self):
        """Hi·ªÉn th·ªã setting modal"""
        self.app.sound_system.play_sound('button_click')
        self.app.setting_modal.show()
    
    # Advanced settings method removed - not needed anymore

    def back_to_home(self):
        self.app.sound_system.play_sound('button_click')
        self.scene = MenuState.HOME
        self.current_button_index = 0
        self._last_button_index = -1  # Reset ƒë·ªÉ kh√¥ng ph√°t hover sound
        self._update_scene_focus()
    
    def _update_scene_focus(self):
        buttons = [comp for comp in self.UIComponents[self.scene] if isinstance(comp, PacManButton)]
        self._update_button_focus(buttons)

    def draw(self, _screen=None):
        """V·∫Ω menu l√™n app.screen (b·ªè qua screen truy·ªÅn v√†o ƒë·ªÉ th·ªëng nh·∫•t)"""
        screen = self.app.screen
        
        screen.fill((0, 0, 0))
        
        if hasattr(self, 'background') and self.background:
            screen.blit(self.background, (0, 0))
        else:
            screen.fill((20, 20, 40))
        
        self.animation_time += 0.02
        self._draw_pac_dots(screen)
        
        for comp in self.UIComponents[self.scene]:
            if hasattr(comp, 'render'):
                comp.render()   # c√°c component t·ª± v·∫Ω v√†o app.screen
        
        # Advanced settings removed - only basic settings modal

    def _draw_pac_dots(self, screen):
        dot_colors = [DOT_WHITE, PAC_YELLOW, GHOST_PINK, GHOST_RED]
        
        for i in range(15):
            x = (self.animation_time * 50 + i * 200) % (self.app.WIDTH + 100) - 50
            y = 150 + (i * 67) % 400 + 10 * math.sin(self.animation_time * 3 + i * 0.8)
            
            base_size = 4 if i % 4 == 0 else 3
            size = base_size + int(1 * math.sin(self.animation_time * 4 + i))
            color = dot_colors[i % len(dot_colors)]
            
            if 0 <= x <= self.app.WIDTH and 0 <= y <= self.app.HEIGHT:
                glow_surf = pygame.Surface((size*4, size*4), pygame.SRCALPHA)
                pygame.draw.circle(glow_surf, (*color, 80), (size*2, size*2), size*2)
                screen.blit(glow_surf, (int(x-size*2), int(y-size*2)))
                
                pygame.draw.circle(screen, color, (int(x), int(y)), size)

    def logic(self):
        for comp in self.UIComponents[self.scene]:
            if hasattr(comp, 'update'):
                comp.update()
        
        # Advanced settings removed - only basic settings

    def handle_events(self, event):
        # Advanced settings removed - only basic settings now
        
        if event.type == pygame.KEYDOWN:
            self._handle_keyboard_navigation(event)
        elif event.type == pygame.MOUSEBUTTONDOWN:
            for comp in self.UIComponents[self.scene]:
                if hasattr(comp, "handle_event"):
                    comp.handle_event(event)
        elif event.type == pygame.MOUSEMOTION:
            # X·ª≠ l√Ω mouse hover ƒë·ªÉ ph√°t √¢m thanh
            self._handle_mouse_hover(event)
        
        for comp in self.UIComponents[self.scene]:
            if hasattr(comp, "handle_event"):
                comp.handle_event(event)
    
    def _handle_mouse_hover(self, event):
        """X·ª≠ l√Ω mouse hover ƒë·ªÉ ph√°t √¢m thanh"""
        buttons = [comp for comp in self.UIComponents[self.scene] if isinstance(comp, PacManButton)]
        mouse_pos = event.pos
        
        # T√¨m button ƒëang ƒë∆∞·ª£c hover
        hovered_button_index = -1
        for i, button in enumerate(buttons):
            if hasattr(button, 'rect') and button.rect.collidepoint(mouse_pos):
                hovered_button_index = i
                break
        
        # Ph√°t √¢m thanh hover n·∫øu button thay ƒë·ªïi
        if hovered_button_index != -1 and hovered_button_index != getattr(self, '_last_hovered_button', -1):
            self.app.sound_system.play_sound('button_hover')
            self._last_hovered_button = hovered_button_index
        elif hovered_button_index == -1:
            self._last_hovered_button = -1
    
    def _handle_keyboard_navigation(self, event):
        buttons = [comp for comp in self.UIComponents[self.scene] if isinstance(comp, PacManButton)]        
        if event.key == pygame.K_TAB:
            self.current_button_index = (self.current_button_index + 1) % len(buttons)
            self._update_button_focus(buttons)
        elif event.key in (pygame.K_UP, pygame.K_DOWN):
            if event.key == pygame.K_UP:
                self.current_button_index = (self.current_button_index - 1) % len(buttons)
            else:
                self.current_button_index = (self.current_button_index + 1) % len(buttons)
            self._update_button_focus(buttons)
        elif event.key in (pygame.K_RETURN, pygame.K_SPACE):
            if buttons:
                buttons[self.current_button_index]._trigger_click()
        elif event.key == pygame.K_ESCAPE:
            if self.scene == MenuState.HOME:
                self.quit()
            else:
                self.back_to_home()
    
    def _update_button_focus(self, buttons):
        # L∆∞u index c≈© ƒë·ªÉ ph√°t hi·ªán thay ƒë·ªïi
        old_index = getattr(self, '_last_button_index', -1)
        
        for i, button in enumerate(buttons):
            button.set_focus(False)  # X√≥a ti√™u ƒëi·ªÉm c·ªßa t·∫•t c·∫£ n√∫t
        buttons[self.current_button_index].set_focus(True)
        
        # Ph√°t √¢m thanh hover n·∫øu button thay ƒë·ªïi
        if old_index != self.current_button_index and old_index != -1:
            self.app.sound_system.play_sound('button_hover')
        
        # L∆∞u index hi·ªán t·∫°i
        self._last_button_index = self.current_button_index
            
    def on_resume(self):
        """
        ƒê∆∞·ª£c g·ªçi khi state ƒë∆∞·ª£c resume
        """
        pass
    
    def on_exit(self):
        """
        ƒê∆∞·ª£c g·ªçi khi state b·ªã exit
        """
        pass
    
    def on_settings_changed(self, settings):
        """
        ƒê∆∞·ª£c g·ªçi khi settings thay ƒë·ªïi
        """
        # C·∫≠p nh·∫≠t volume cho menu state n·∫øu c·∫ßn
        if hasattr(self.app, 'sfx_volume'):
            self.app.sfx_volume = settings.get('sfx_volume', 0.8)
        
        # C·∫≠p nh·∫≠t music volume n·∫øu c√≥
        if 'music_volume' in settings:
            pygame.mixer.music.set_volume(settings['music_volume'])
        
        print("Menu state: Settings updated")
    
    @classmethod
    def quit(cls):
        pygame.quit()
        sys.exit(0)
